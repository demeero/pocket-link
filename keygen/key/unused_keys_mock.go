// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/demeero/pocket-link/keygen/key (interfaces: UnusedKeysRepository)

// Package key is a generated GoMock package.
package key

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnusedKeysRepository is a mock of UnusedKeysRepository interface.
type MockUnusedKeysRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUnusedKeysRepositoryMockRecorder
}

// MockUnusedKeysRepositoryMockRecorder is the mock recorder for MockUnusedKeysRepository.
type MockUnusedKeysRepositoryMockRecorder struct {
	mock *MockUnusedKeysRepository
}

// NewMockUnusedKeysRepository creates a new mock instance.
func NewMockUnusedKeysRepository(ctrl *gomock.Controller) *MockUnusedKeysRepository {
	mock := &MockUnusedKeysRepository{ctrl: ctrl}
	mock.recorder = &MockUnusedKeysRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnusedKeysRepository) EXPECT() *MockUnusedKeysRepositoryMockRecorder {
	return m.recorder
}

// LoadAndDelete mocks base method.
func (m *MockUnusedKeysRepository) LoadAndDelete(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAndDelete", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAndDelete indicates an expected call of LoadAndDelete.
func (mr *MockUnusedKeysRepositoryMockRecorder) LoadAndDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAndDelete", reflect.TypeOf((*MockUnusedKeysRepository)(nil).LoadAndDelete), arg0)
}

// Size mocks base method.
func (m *MockUnusedKeysRepository) Size(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockUnusedKeysRepositoryMockRecorder) Size(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockUnusedKeysRepository)(nil).Size), arg0)
}

// Store mocks base method.
func (m *MockUnusedKeysRepository) Store(arg0 context.Context, arg1 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Store", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockUnusedKeysRepositoryMockRecorder) Store(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUnusedKeysRepository)(nil).Store), varargs...)
}
